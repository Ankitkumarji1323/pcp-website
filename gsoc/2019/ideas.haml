!!! html
%html
  %head
    = Haml::Engine.new(File.read("assets/haml-includes/head.haml")).render

  %body
    = Haml::Engine.new(File.read("assets/haml-includes/navigation.haml")).render

    %div{:class => 'site-content'}
      %div{:class => 'how-to is-typeset'}

        %div{:class => 'row-parent'}
          %div{:class => 'row'}
            %section{:class => 'row__colspaced'}
              %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %br
                  %h3 Ideas List
                  %ol
                    %li
                      Analysis Tools
                      %ul
                        %li
                          %a{:href => '#pmlogreduce'} Temporal data reduction for PCP archives
                        %li
                          %a{:href => '#collectl'} PCP version of collectl
                        %li
                          %a{:href => '#htop'} PCP platform for htop
                        %li
                          %a{:href => '#nmon'} PCP version of nmon
                    %li
                      Integration Projects
                      %ul
                        %li
                          %a{:href => '#statsd'} Using metrics from statsd with PCP
                    %li
                      Web Projects
                      %ul
                        %li
                          %a{:href => '#pmseries'} Scaling timeseries injest and querying
                        %li
                          %a{:href => '#dashboards'} Grafana dashboards for PCP metrics
                        %li
                          %a{:href => '#worldmap'} Grafana world map for PCP metrics
                  %br

              %div{:class => 'colspan12-4 colspan8-3 colspan6-2 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--cta'}
                  %h2 Google
                  %h2 Summer of Code
                  %h2 2019
                  %br
                    (
                    %a{:href => 'https://summerofcode.withgoogle.com'} Home
                    )
                  %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'pmlogreduce'}
            %h3 Temporal data reduction for PCP archives
            %p
              The primary focus of this project is the implementation of proper
              and sound semantics for reduction of the PCP archive data volume,
              in the temporal domain.
              The PCP
              %a{:href => 'https://pcp.io/man/man1/pmlogreduce.1.html'} pmlogreduce
              utility already exists to transform an input archive into a reduced
              archive.
              This will require a student to gain a deep understanding of the
              PCP archive format created by
              %a{:href => 'https://pcp.io/man/man1/pmlogger.1.html'} pmlogger
              and to tackle issues around data reduction by pmlogreduce in the
              presence of counter wraps, restarts, small amounts of missing
              data, and so on.
            %p
              There are also several possible areas of extension on this work,
              which include:
              %ul
                %li
                  Omitting repeated value-instance pairs
                %li
                  Lazy (just in time) loading of metadata
                %li
                  Delta encoding of metric instance domains
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              and can also expect to gain deep insight into the semantics of
              performance data stored by PCP.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:kenj@kenj.id.au'} Ken McDonell
              ,
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
            %p
              %strong Interested students so far:
              0

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'collectl'}
            %h3 PCP version of collectl
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              An initial PCP implementation (pcp-collectl) of the
              %a{:href => 'http://collectl.sourceforge.net/'} Collectl
              utility provides some initial support for the same style of reports.
              This project will extend that initial code to complete the reporting
              coverage provided by the initial collectl utility.
              The pcp-collectl utility will be updated to use the more modern
              %a{:href => 'http://man7.org/linux/man-pages/man1/pmrep.1.html'} pmrep
              utility modules under the covers.
              Additionally, the test coverage and documentation will be improved.
            %p
              %strong Expected results:
              The student will extend their Python programming skills,
              and can also expect to gain insight into the meaning of the kernel
              data reported by this tool, and the sampling techniques it uses.
            %p
              %strong Prerequisite knowledge:
              Python programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
            %p
              %strong Interested students so far:
              0
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'htop'}
            %h3 PCP platform for htop
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              %a{:href => 'http://hisham.hm/htop/'} HTOP
              is a performance analysis utility reporting per-process metrics with
              good, customizable visualization of that data.
            %p
              This project will involve implementing a HTOP "platform" for PCP.
            %p
              %strong Expected results:
              A (C language) implementation of an HTOP backend using the PCP PMAPI,
              with accompanying tests and documentation.
              The student will extend their C programming skills, as well as learn
              about the ncurses library.  Students can also expect to gain insight
              into the meaning of the kernel data reported by these tools, and the
              sampling techniques used in building the tools.
            %p
              %strong Prerequisite knowledge:
              C programming, ncurses library knowledge a plus.
            %p
              %strong Skill level:
              Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:lberk@redhat.com'} Lukas Berk
            %p
              %strong Interested students so far:
              0
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'nmon'}
            %h3 PCP version of nmon
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              The
              %a{:href => 'http://nmon.sourceforge.net/pmwiki.php'} nmon
              utility provides a curses-based interface for reporting on a variety
              of system and per-process metrics to a console, as well as a CSV
              (Comma Separated Value) output format.
              This project will implement a version of the nmon utility using the
              PCP metrics API (PMAPI), based on the current nmon source code.
              Additionally, regression tests will be implemented and documentation
              will be improved.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              and can also expect to gain insight into the meaning of the kernel
              data reported by this tool, and the sampling techniques it uses.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:lberk@redhat.com'} Lukas Berk
            %p
              %strong Interested students so far:
              0

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'statsd'}
            %h3 Using metrics from statsd with PCP
            %p
              Performance Co-Pilot is a system performance analysis toolkit which
              currently does not provide an agent for
              %a{:href => 'https://github.com/etsy/statsd'} statsd
              protocol, a text-based UDP protocol for
              %a{:href => 'https://codeascraft.com/2011/02/15/measure-anything-measure-everything/'} performance data
              aggregation.
              The goal is to design and write a PCP agent as a multi-threaded C
              process performing aggregation of statsd packets as pluggable modules
              with two implementations: exact computation and HDR histogram with
              parsing code as pluggable modules: custom parser or ragel-based parser.
              Additionally, regression tests will be implemented and documentation
              provided.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              and learn about the inner workings of performance analysis tools
              like PCP and statsd.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:lzap@redhat.com'} Lukas Zapletal
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              1

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'nmon'}
            %h3 Scaling timeseries injest and querying
            %p
              The Performance Co-Pilot approach to scalable, multi-host performance
              analysis builds on the
              %a{:href => 'https://redis.io'} Redis
              distributed data store and its native timeseries support.
              The
              %a{:href => 'https://pcp.io/man/man1/pmseries.1.html'} pmseries
              utility and
              %a{:href => 'https://pcp.io/man/man1/pmproxy.1.html'} pmproxy
              daemon provide the tooling and APIs to support this.
              This project will explore scalability limits of each these programs,
              with the aim of scaling up PCP timeseries injest and querying to the
              level of many-thousands-of-nodes.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              learn about the
              %a{:href => 'https://redis.io'} Redis
              distributed data store (and
              %a{:href => 'https://redis.io/topics/cluster-spec'} Redis clustering
              in particular),
              gain deep familiarity with performance tuning tools such as
              %a{:href => 'https://perf.wiki.kernel.org/index.php/Tutorial'} perf
              as well as learning to apply PCP tools to analyse complex distributed
              system performance problems.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:lberk@redhat.com'} Lukas Berk
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              0

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'dashboards'}
            %h3 Grafana dashboards for PCP metrics
            %p
              Grafana
              %a{:href => 'https://grafana.com/dashboards'} dashboards
              project details ... (Mark, insert details here please).
            %p
              %strong Expected results:
              The student will extend their Javascript programming skills,
              and will gain insight into the semantics of various forms of
              performance data available from systems and applications, and
              visualization techniques appropriate to their analysis.
            %p
              %strong Prerequisite knowledge:
              Javascript programming.
            %p
              %strong Skill level:
              Introductory
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:lberk@redhat.com'} Lukas Berk
            %p
              %strong Interested students so far:
              0

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'worldmap'}
            %h3 Grafana world map for PCP metrics
            %p
              The Grafana
              %a{:href => 'https://grafana.com/plugins/grafana-worldmap-panel/installation'} world map
              panel displays time series data or geohash data from a metric
              source overlaid on a world map.
              The PCP 
              %a{:href => 'https://pcp.io/man/man1/pmseries.1.html'} pmseries
              tool and APIs can injest and respond to queries about
              performance metrics labeled with geographical location
              information, with the help of the
              %a{:href => 'https://redis.io/commands/geohash'} geohash
              support in the
              %a{:href => 'https://redis.io'} Redis
              distributed data store.
              This project will implement tooling and APIs to interface
              Grafana and Redis for PCP metrics.
            %p
              %strong Expected results:
              The student will extend their C and javascript programming skills,
              learn about the
              %a{:href => 'https://redis.io'} Redis
              distributed data store and geolocation services.
            %p
              %strong Prerequisite knowledge:
              C, Javascript programming.
            %p
              %strong Skill level:
              Introductory
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              0

    = Haml::Engine.new(File.read("assets/haml-includes/footer.haml")).render
