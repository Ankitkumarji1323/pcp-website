!!! html
%html
  %head
    = Haml::Engine.new(File.read("assets/haml-includes/head.haml")).render

  %body
    = Haml::Engine.new(File.read("assets/haml-includes/navigation.haml")).render

    %div{:class => 'site-content'}
      %div{:class => 'how-to is-typeset'}

        %div{:class => 'row-parent'}
          %div{:class => 'row'}
            %section{:class => 'row__colspaced'}
              %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %br
                  %h3 Ideas List
                  %ol
                    %li
                      Web projects
                      %ul
                        %li
                          %a{:href => '#directed'} Directed Grafana dashboards
                    %li
                      Timeseries projects
                      %ul
                        %li
                          %a{:href => '#scalable'} Scale-out timeseries injest and querying
                        %li
                          %a{:href => '#language'} Timeseries query language extensions
                  %br

              %div{:class => 'colspan12-4 colspan8-3 colspan6-2 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--cta'}
                  %h2 Google
                  %h2 Summer of Code
                  %h2 2020
                  %br
                    (
                    %a{:href => 'https://summerofcode.withgoogle.com'} Home
                    )
                  %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'grafana'}
            %h3 Grafana dashboards for PCP metrics
            %p
              This project involves advancing the performance analysis
              capabilities provided by the PCP
              %a{:href => 'https://grafana.com/'} Grafana
              integration in
              %a{:href => 'https://grafana-pcp.readthedocs.io/'} grafana-pcp.
            %p
              The successful student will work on:
              %ol
                %li
                  developing 'directed' dashboards with the
                  %a{:href => 'https://grafana.com/docs/grafana/latest/reference/scripting/'} scripted dashboards
                %li
                  supporting PCP 'derived metrics' in the Vector data source,
                  as described in the PCP
                  %a{:href => 'https://pcp.io/man/man3/pmwebapi.1.html'} REST API
                  documentation
                %li
                  improving the 'metric search' process through full-text
                  search on PCP metric names, labels and descriptions
            %p
              Based on performance metrics from PCP and a predefined rule set,
              the 'directed' dashboard should display only relevant metrics to
              the user.
              For example, if the CPU utilization is high, it should show an
              overview of CPU statistics and processes contributing load.
              The user should then be able to drill down into more specific
              areas of interest - e.g. present graphs about lock contention.
            %p
              For each recognized performance issue a link should be presented
              to the user on how to resolve the issue.
              In this way the dashboards guide users toward possible root cause
              of performance problems.
            %p
              As a starting point, an initial
              %a{:href => 'https://github.com/performancecopilot/pcp-webapp-grafana/blob/checklist/checklist.json'} checklist
              schema shows a tree structure, rules, help text and links to
              further information.
            %p
              %strong Expected results:
              The student will extend their Javascript and React programming
              skills, will gain insight into the semantics of various forms of
              performance data available from systems and applications, and
              visualization techniques appropriate to their analysis.
              They will also learn a great detail about the inner workings of
              %a{:href => 'https://grafana.com/'} Grafana,
              a popular open-source visualization tool.
            %p
              %strong Prerequisite knowledge:
              Javascript and React programming, operating systems.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:agerstmayr@redhat.com'} Andreas Gerstmayr
              , secondary mentor:
              %a{:href => 'mailto:jkoch@netflix.com'} Jason Koch
            -#%p
              %strong Interested students so far:
              0
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'scalable'}
            %h3 Scaling timeseries injest and querying
            %p
              The Performance Co-Pilot approach to scalable, multi-host performance
              analysis builds on the
              %a{:href => 'https://redis.io'} Redis
              distributed data store and its native timeseries support.
              The
              %a{:href => 'https://pcp.io/man/man1/pmseries.1.html'} pmseries
              utility and
              %a{:href => 'https://pcp.io/man/man1/pmproxy.1.html'} pmproxy
              daemon provide the tooling and APIs to support this.
              This project will improve scalability in these programs through:
              %ol
                %li
                  extending PCP instrumentation in
                  %a{:href => 'https://pcp.io/man/man1/pmproxy.1.html'} pmproxy
                  to expose latency and throughput metrics to analysis tools
                %li
                  adding PCP functionality to make
                  %a{:href => 'https://pcp.io/man/man1/pmseries.1.html'} pmseries
                  queries use Redis features for parallel query execution, with
                  the aim of scaling up PCP timeseries injest and querying to the
                  level of many-thousands-of-nodes.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              learn about the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store (and
              %a{:href => 'https://redis.io/topics/cluster-spec'} Redis clustering
              in particular),
              gain deep familiarity with low-level Linux performance tuning tools such as
              %a{:href => 'https://perf.wiki.kernel.org/index.php/Tutorial'} perf
              and
              %a{:href => 'https://github.com/iovisor/bpftrace/blob/master/README.md'} bpftrace
              as well as learning to apply PCP tools to analyse complex distributed
              system performance problems.
            %p
              %strong Prerequisite knowledge:
              C programming, Linux experience.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              , secondary mentor:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
            -#%p
              %strong Interested students so far:
              0
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'language'}
            %h3 Timeseries query language extension
            %p
              The Performance Co-Pilot timeseries query language allows for
              queries based on metric names and labels using logical operators.
              A command line utility and a REST API are available from
              %a{:href => 'https://pcp.io/man/man1/pmseries.1.html'} pmseries
              and the
              %a{:href => 'https://pcp.io/man/man1/pmproxy.1.html'} pmproxy
              daemon.
            %p
              The following is a simple example query which extracts the five
              most recently sampled values for aggregate disk read throughput
              (disk.all.read metric) for two hosts (app1 and app2.acme.com):
              %pre
                disk.all.read { hostname:"app1" || hostname:"app2" }[count: 5]
            %p
              Under the covers, the query language uses the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store and its native timeseries support.
              The
              %a{:href => 'https://pcp.io/man/man1/pmseries.1.html'} pmseries
              command line utility provides low-level access to the language.
            %p
              This project will extend the existing query language with:
              %ol
                %li
                  statistical functions (sum, mean, average, standard deviation,
                  histogram binning, top-N, N-th percentile)
                %li
                  rate conversion function for counter metrics
                %li
                  scale and unit conversion functions
                %li
                  mathematical functions (abs, floor, log, sqrt, round)
                %li
                  binary operators for numeric metrics (addition, subtraction,
                  division, multiplication, exponentiation)
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              learn about the
              %a{:href => 'https://en.wikipedia.org/wiki/Lex_(software)'} lex
              and
              %a{:href => 'https://en.wikipedia.org/wiki/Yacc'} yacc
              language parsing tools,
              performance analysis with PCP and the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              , secondary mentor:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            -#%p
              %strong Interested students so far:
              0
            %br

    = Haml::Engine.new(File.read("assets/haml-includes/footer.haml")).render
